package main

import (
	"github.com/stretchr/testify/mock"
	"os"
	"testing"

	"github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"
)

func TestInitializeLogWithEnvVar(t *testing.T) {
	// Backup existing environment variable and defer its restoration
	originalLogLevel := os.Getenv("LOG_LEVEL")
	defer os.Setenv("LOG_LEVEL", originalLogLevel)

	tests := []struct {
		name          string
		envLogLevel   string
		expectedLevel logrus.Level
	}{
		{"Default", "", logrus.DebugLevel},
		{"InfoLevel", "info", logrus.InfoLevel},
		{"WarnLevel", "warn", logrus.WarnLevel},
		{"ErrorLevel", "error", logrus.ErrorLevel},
		// Add more cases as needed
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Set environment variable for the test
			if err := os.Setenv("LOG_LEVEL", tt.envLogLevel); err != nil {
				t.Fatalf("Failed to set env var: %v", err)
			}

			// Run function under test
			log := initializeLog()

			// Assertions
			assert.Equal(t, tt.expectedLevel, log.GetLevel())
			assert.IsType(t, &logrus.Logger{}, log)
		})
	}
}

// MockStoreClient is an autogenerated mock type for the StoreClient type
type MockStoreClient struct {
	mock.Mock
}

// MockCloudbedsClient is an autogenerated mock type for the CloudbedsClient type
type MockCloudbedsClient struct {
	mock.Mock
}

// MockPBX3CXClient is an autogenerated mock type for the PBX3CXClient type
type MockPBX3CXClient struct {
	mock.Mock
}

//func TestHandleLookupByNumber(t *testing.T) {
//	// Set environment variables for the test
//	os.Setenv("APPLICATION_NAME", "test-app")
//	os.Setenv("ENVIRONMENT", "test-env")
//	os.Setenv("AWS_REGION", "test-region")
//
//	mockStore := new(MockStoreClient)
//	mockCloudbeds := new(MockCloudbedsClient)
//	mockPBX3CX := new(MockPBX3CXClient)
//
//	// Setup mock expectations
//	expectedNumber := "12345"
//	mockCloudbeds.On("SomeCloudbedsMethod", expectedNumber).Return("DummyContact", nil)
//	mockPBX3CX.On("SomePBX3CXMethod", expectedNumber).Return(nil)
//
//	req := events.APIGatewayProxyRequest{
//		QueryStringParameters: map[string]string{"Number": expectedNumber},
//	}
//
//	ctx := context.TODO()
//
//	// Run the function under test
//	resp, err := HandleLookupByNumber(ctx, req)
//
//	// Validate
//	assert.NotNil(t, resp)
//	assert.Nil(t, err)
//
//	// Validate mock expectations
//	mockStore.AssertExpectations(t)
//	mockCloudbeds.AssertExpectations(t)
//	mockPBX3CX.AssertExpectations(t)
//}
